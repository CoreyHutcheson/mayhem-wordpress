// ##### FUNCTIONS
@function pi() {
  @return 3.14159265359;
}

@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function sqrt($square, $tolerance: 0.001, $estimate: $square/2) {
  @if abs($square - $estimate*$estimate) < $tolerance {
    @return $estimate;
  }

  @return sqrt($square, $tolerance, ($estimate + $square/$estimate)/2);
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle,  (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

$default-threshold: pi()/180/20;

@function convert-angle($value, $unit-name) {
  $factors: (
    rad: 1rad,
    deg: 180deg / pi(),
    grad: 200grad / pi(),
    turn: 0.5turn / pi()
  );

  @if not unitless($value) {
    @warn '`#{$value}` should be unitless';
    @return false;
  }

  @if not map-has-key($factors, $unit-name) {
    @warn 'unit `#{$unit-name}` is not a valid unit - please make sure it is either `deg`,
      `rad`,
      `grad` or `turn`';
    @return false;
  }

  @return $value*map-get($factors, $unit-name);
}

@function asin($z, $unit-name: deg, $threshold: $default-threshold) {
  $sum: 0;
  $complement: false;
  $sign: if($z != 0, $z/abs($z), 1);
  $z: abs($z);

  @if $z > 1 {
    @warn 'illegal `#{$z}` value for function';
    @return false;
  }

  @if $z > sin(pi()/4) {
    $complement: true;
    $z: sqrt(1 - pow($z, 2));
  }

  $term: $z;
  $i: 0;
  $k: 1;

  @while $term > $threshold {
    $sum: $sum + $term;

    $i: $i + 1;
    $k: $k*(2*$i - 1)/(2*$i);
    $j: 2*$i + 1;

    $term: $k*pow($z, $j)/$j;
  }

  @return convert-angle($sign*(if($complement, pi()/2 - $sum, $sum)), $unit-name);
}

@function acos($z, $unit-name: deg, $threshold: $default-threshold) {
  @return convert-angle(pi()/2, $unit-name) - asin($z, $unit-name, $threshold);
}
// ###### END FUNCTIONS

// Can change the following variables
$btn-size: 40px;
$bar-thickness: 6px;
$shift: 20%;

// Calculations -- Dont Change!!!
$margin: ($btn-size - ($bar-thickness * 3)) / 4;
$a: ($btn-size - (($shift * 2 / 100%) * $btn-size)) / 1px;
$b: (($margin * 2) + ($bar-thickness * 2)) / 1px;
$c: sqrt(pow($a, 2) + pow($b, 2));
$new-bar-length: $c * 1px;
$rotate-angle: acos( (pow($c, 2) + pow($a, 2) - pow($b, 2)) / (2 * $c * $a));

.toggle-btn {
  width: $btn-size;
  height: $btn-size;

  span {
    display: block;
    width: 100%;
    height: $bar-thickness;
    position: relative;
    left: 0px;
    margin-top: $margin;
    background: #eee;
    transition: 0.5s ease-in-out;
    transform-origin: left center;
  }
}

.js-is-open {
  .toggle-btn__bar1,
  .toggle-btn__bar3 {
    width: $new-bar-length;
    left: $shift;
  }
  
  .toggle-btn__bar1 {
    transform: rotate($rotate-angle);
  }

  .toggle-btn__bar2 {
    width: 0%;
    opacity: 0;
    left: $shift;
  }

  .toggle-btn__bar3 {
    transform: rotate(-1 * $rotate-angle);
  }
}